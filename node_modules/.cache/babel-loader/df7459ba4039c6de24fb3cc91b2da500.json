{"ast":null,"code":"import _objectSpread from \"/home/mho/lighthouse/stormy/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/mho/lighthouse/stormy/app/src/components/information/WeatherPlot.js\";\nimport React from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport Paper from '@material-ui/core/Paper';\n\nvar Plotly = require('plotly.js-basic-dist');\n\nvar Plot = createPlotlyComponent(Plotly); // function to calculate total precipitation from snow or rain\n\nvar precipitationTotal = function precipitationTotal(precipitations) {\n  var totalPrecipitationList = [];\n  precipitations.reduce(function (total, precipitation) {\n    total += precipitation;\n    totalPrecipitationList.push(total);\n    return total;\n  }, 0);\n  return totalPrecipitationList;\n};\n\nexport default function WeatherPlot(props) {\n  var consolidate = props.weather;\n  var dateList = consolidate.dt.map(function (time) {\n    return new Date(time * 1000);\n  });\n  var snowTotal = precipitationTotal(consolidate.snow);\n  var rainTotal = precipitationTotal(consolidate.rain);\n  var temp = {\n    x: dateList,\n    y: consolidate.temp,\n    type: 'scatter',\n    mode: 'lines+markers',\n    marker: {\n      color: 'red'\n    },\n    hovertemplate: \"%{x}<br>Temperature: %{y}\\xB0C<extra></extra>\",\n    showlegend: false\n  };\n  console.log(rainTotal);\n  var windSpeed = {\n    x: dateList,\n    y: consolidate.windSpeed,\n    customdata: consolidate.windDeg,\n    hovertemplate: '%{x}<br>Wind Speed: %{y} m/s' + '<br>Wind Direction: %{customdata}<extra></extra>',\n    type: 'scatter',\n    mode: 'lines+markers',\n    marker: {\n      color: 'green'\n    },\n    showlegend: false\n  };\n  var rain = {\n    x: dateList,\n    y: consolidate.rain,\n    customdata: rainTotal,\n    hovertemplate: '%{x}' + '<br>1 hour rain: %{y} mm' + '<br>Total rain: %{customdata:.2f} mm <extra></extra>',\n    type: 'scatter',\n    mode: 'lines+markers',\n    marker: {\n      color: 'blue'\n    },\n    showlegend: false\n  };\n  var totalRain = {\n    x: dateList,\n    y: rainTotal,\n    type: 'bar',\n    marker: {\n      color: '#cd7eaf'\n    },\n    hovertemplate: '<extra></extra>',\n    showlegend: false\n  };\n  var snow = {\n    x: dateList,\n    y: consolidate.snow,\n    customdata: snowTotal,\n    hovertemplate: '%{x}<br>1 hour snow: %{y} mm' + '<br>Total snow: %{customdata:.2f} mm <extra></extra>',\n    type: 'scatter',\n    mode: 'lines+markers',\n    marker: {\n      color: '#grey'\n    },\n    showlegend: false\n  };\n  var totalSnow = {\n    x: dateList,\n    y: snowTotal,\n    type: 'bar',\n    marker: {\n      color: '#cd7eaf'\n    },\n    hovertemplate: '<extra></extra>',\n    showlegend: false\n  }; // const data = [temp, windSpeed, rain, snow, totalRain, totalSnow]\n\n  var layout = {\n    xaxis: {\n      tickformat: '%b %e \\n %H:%M',\n      nticks: 16 // showspikes:true,\n      // spikesnap:\"hovered data\"\n\n    },\n    margin: {\n      l: 40,\n      r: 40,\n      b: 60,\n      t: 30,\n      pad: 4\n    },\n    // autosize:true\n    width: 900,\n    height: 200\n  };\n  return /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Plot, {\n    data: [temp],\n    layout: _objectSpread({}, layout, {\n      title: {\n        text: '<b> Temperature </b>'\n      },\n      yaxis: {\n        title: {\n          text: \"Temperature (\\xB0C)\"\n        }\n      }\n    }),\n    config: {\n      displayModeBar: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Plot, {\n    data: [windSpeed],\n    layout: _objectSpread({}, layout, {\n      title: {\n        text: '<b>Wind Speed and Direction</b>'\n      },\n      yaxis: {\n        title: {\n          text: 'Wind speed (m/s)'\n        }\n      }\n    }),\n    config: {\n      displayModeBar: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Plot, {\n    data: [rain, totalRain],\n    layout: _objectSpread({}, layout, {\n      title: {\n        text: '<b>Rain</b>'\n      },\n      yaxis: {\n        title: {\n          text: 'Rain (mm)'\n        }\n      }\n    }),\n    config: {\n      displayModeBar: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Plot, {\n    data: [snow, totalSnow],\n    layout: _objectSpread({}, layout, {\n      title: {\n        text: '<b>Snow</b>'\n      },\n      yaxis: {\n        title: {\n          text: 'Snow (mm)'\n        }\n      }\n    }),\n    config: {\n      displayModeBar: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/mho/lighthouse/stormy/app/src/components/information/WeatherPlot.js"],"names":["React","createPlotlyComponent","Paper","Plotly","require","Plot","precipitationTotal","precipitations","totalPrecipitationList","reduce","total","precipitation","push","WeatherPlot","props","consolidate","weather","dateList","dt","map","time","Date","snowTotal","snow","rainTotal","rain","temp","x","y","type","mode","marker","color","hovertemplate","showlegend","console","log","windSpeed","customdata","windDeg","totalRain","totalSnow","layout","xaxis","tickformat","nticks","margin","l","r","b","t","pad","width","height","title","text","yaxis","displayModeBar"],"mappings":"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","sourcesContent":["import React from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport Paper from '@material-ui/core/Paper';\n\nconst Plotly = require('plotly.js-basic-dist');\nconst Plot = createPlotlyComponent(Plotly);\n\n// function to calculate total precipitation from snow or rain\nconst precipitationTotal = (precipitations) => {\n  const totalPrecipitationList = []\n  precipitations.reduce((total, precipitation) => {\n    total += precipitation\n    totalPrecipitationList.push(total)\n    return total\n  }, 0)\n  return totalPrecipitationList\n}\n\nexport default function WeatherPlot(props) { \n  const consolidate = props.weather\n  const dateList= consolidate.dt.map((time) => new Date(time*1000))\n  const snowTotal = precipitationTotal(consolidate.snow)\n  const rainTotal = precipitationTotal(consolidate.rain)\n\n  const temp = {\n      x: dateList,\n      y: consolidate.temp,\n      type: 'scatter',\n      mode: 'lines+markers',\n      marker: {color: 'red'},\n      hovertemplate: '%{x}<br>Temperature: %{y}\\u00B0C<extra></extra>',\n      showlegend: false\n    }\n\n    console.log(rainTotal)\n  const windSpeed = {\n    x: dateList,\n    y: consolidate.windSpeed,\n    customdata:consolidate.windDeg,\n    hovertemplate:\n    '%{x}<br>Wind Speed: %{y} m/s'+\n    '<br>Wind Direction: %{customdata}<extra></extra>',\n    type: 'scatter',\n    mode: 'lines+markers',\n    marker: {color: 'green'},\n    showlegend: false\n  }\n  const rain = {\n    x: dateList,\n    y: consolidate.rain,\n    customdata:rainTotal,\n    hovertemplate:\n    '%{x}'+\n    '<br>1 hour rain: %{y} mm'+\n    '<br>Total rain: %{customdata:.2f} mm <extra></extra>',\n    type: 'scatter',\n    mode: 'lines+markers',\n    marker: {color: 'blue'},\n    showlegend: false\n\n  }\n  const totalRain = {\n    x: dateList,\n    y: rainTotal,\n    type: 'bar',\n    marker: {color: '#cd7eaf'},\n    hovertemplate:'<extra></extra>',\n    showlegend: false\n  }\n  const snow = {\n    x: dateList,\n    y: consolidate.snow,\n    customdata:snowTotal,\n    hovertemplate:\n    '%{x}<br>1 hour snow: %{y} mm'+\n    '<br>Total snow: %{customdata:.2f} mm <extra></extra>',\n    type: 'scatter',\n    mode: 'lines+markers',\n    marker: {color: '#grey'},\n    showlegend: false\n  }\n\n  const totalSnow = {\n    x: dateList,\n    y: snowTotal,\n    type: 'bar',\n    marker: {color: '#cd7eaf'},\n    hovertemplate:'<extra></extra>',\n    showlegend: false\n  }\n  // const data = [temp, windSpeed, rain, snow, totalRain, totalSnow]\n  \n  const layout = {\n    xaxis: {\n      tickformat:'%b %e \\n %H:%M',\n      nticks:16,\n      // showspikes:true,\n      // spikesnap:\"hovered data\"\n    },\n    margin:{\n      l: 40,\n      r: 40,\n      b: 60,\n      t: 30,\n      pad: 4\n    },\n    // autosize:true\n    width:900,\n    height:200\n  }\n\n  return (\n    <Paper>\n      <Plot data={[temp]} layout={{...layout,title: {text: '<b> Temperature </b>'}, yaxis:{title: {text: 'Temperature (\\u00B0C)'}}}} config={{displayModeBar: false}}/>\n      <Plot data={[windSpeed]} layout={{...layout,title: {text: '<b>Wind Speed and Direction</b>'}, yaxis:{title: {text: 'Wind speed (m/s)'}}}} config={{displayModeBar: false}}/>\n      <Plot data={[rain, totalRain]} layout={{...layout,title: {text: '<b>Rain</b>'}, yaxis:{title: {text: 'Rain (mm)'}}}} config={{displayModeBar: false}}/>\n      <Plot data={[snow, totalSnow]} layout={{...layout,title: {text: '<b>Snow</b>'}, yaxis:{title: {text: 'Snow (mm)'}}}}  config={{displayModeBar: false}}/>\n      {/* <Plot data={data} layout={layout}/> */}\n    </Paper>\n  )\n}"]},"metadata":{},"sourceType":"module"}