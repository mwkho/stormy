{"ast":null,"code":"import _slicedToArray from \"/home/mho/lighthouse/stormy/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mho/lighthouse/stormy/app/src/components/favourites/Favourites.js\";\nimport React, { useState } from 'react';\nimport Axios from 'axios';\nimport { Container, Typography } from '@material-ui/core';\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport Table from '@material-ui/core/Table';\nimport Paper from '@material-ui/core/Paper';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport FavouritesMarker from \"./FavouritesMarker\";\nimport FavouritesTableItem from \"./FavouritesTableItem\";\nimport SuccessAlert from '../SuccessAlert';\nexport default function Favourites(props) {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var favourites = props.favourites,\n      setFavourites = props.setFavourites,\n      display = props.display,\n      setInformation = props.setInformation,\n      setPOI = props.setPOI,\n      setPlaceId = props.setPlaceId;\n  var britishColumbia = [55.001251, -125.002441];\n  var headerNames = [\"Name\", 'Region', 'Actions'];\n  var header = headerNames.map(function (name) {\n    return /*#__PURE__*/React.createElement(TableCell, {\n      variant: \"head\",\n      colSpan: name === 'Actions' ? 2 : 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 12\n      }\n    }, \" \", name, \" \");\n  }); // deleting favourites and showing popup on success\n\n  var deleteFavourite = function deleteFavourite(poi) {\n    // display('LOADING')\n    Axios.get(\"get/place/\".concat(poi.lat, \"/\").concat(poi.lon)).then(function (results) {\n      var id = results.data.rows[0].id;\n      return Axios.post('delete/favourite', {\n        id: id\n      });\n    }).then(function () {\n      return Axios.get('get/favourites');\n    }).then(function (results) {\n      setOpen(true);\n      setFavourites(results.data.rows);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }; // generating favourite markers in map\n\n\n  var favouritesMarkers = !favourites ? null : favourites.map(function (favourite) {\n    var lat = parseFloat(favourite.lat);\n    var lon = parseFloat(favourite.lon);\n    var name = favourite.name;\n    var region = favourite.region;\n    return /*#__PURE__*/React.createElement(FavouritesMarker, {\n      setPlaceId: setPlaceId,\n      poi: {\n        lat: lat,\n        lon: lon,\n        name: name,\n        region: region\n      },\n      display: display,\n      setPOI: setPOI,\n      setInformation: setInformation,\n      deleteFavourite: deleteFavourite,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    });\n  }); // favourites Table item\n\n  var favouritesTables = !favourites ? null : favourites.map(function (favourite) {\n    var lat = parseFloat(favourite.lat);\n    var lon = parseFloat(favourite.lon);\n    var name = favourite.name;\n    var region = favourite.region;\n    return /*#__PURE__*/React.createElement(FavouritesTableItem, {\n      setPlaceId: setPlaceId,\n      poi: {\n        lat: lat,\n        lon: lon,\n        name: name,\n        region: region\n      },\n      display: display,\n      setPOI: setPOI,\n      setInformation: setInformation,\n      deleteFavourite: deleteFavourite,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    });\n  }); // render the favourites page again on load\n\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Check out your favourite spots!\"), /*#__PURE__*/React.createElement(SuccessAlert, {\n    open: open,\n    onClose: function onClose() {\n      return setOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Removed from favourites!\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"To see the conditions for your favourite locations, click on a point in the map or scroll down for your list of favourites and click on the 'Information'\"), /*#__PURE__*/React.createElement(MapContainer, {\n    center: britishColumbia,\n    minZoom: 4.5,\n    zoomSnap: 0.5,\n    zoom: 4.5,\n    maxBounds: [[60, -140], [49.1, -114.2]],\n    scrollWheelZoom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), favouritesMarkers), /*#__PURE__*/React.createElement(Paper, {\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, header)), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, favouritesTables)))));\n}\n;","map":{"version":3,"sources":["/home/mho/lighthouse/stormy/app/src/components/favourites/Favourites.js"],"names":["React","useState","Axios","Container","Typography","MapContainer","TileLayer","Table","Paper","TableBody","TableCell","TableContainer","TableHead","TableRow","FavouritesMarker","FavouritesTableItem","SuccessAlert","Favourites","props","open","setOpen","favourites","setFavourites","display","setInformation","setPOI","setPlaceId","britishColumbia","headerNames","header","map","name","deleteFavourite","poi","get","lat","lon","then","results","id","data","rows","post","catch","err","console","log","favouritesMarkers","favourite","parseFloat","region","favouritesTables","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState}  from 'react';\nimport Axios from 'axios'\nimport { Container, Typography } from '@material-ui/core';\nimport { MapContainer, TileLayer} from 'react-leaflet'\nimport Table from '@material-ui/core/Table';\nimport Paper from '@material-ui/core/Paper';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport FavouritesMarker from \"./FavouritesMarker\"\nimport FavouritesTableItem from \"./FavouritesTableItem\"\nimport SuccessAlert from '../SuccessAlert'\n\nexport default function Favourites(props){\n  const [open, setOpen] = useState(false)\n\n  const { favourites, setFavourites, display, setInformation, setPOI, setPlaceId} = props\n  \n  const britishColumbia = [55.001251,-125.002441]\n  const headerNames = [\"Name\", 'Region', 'Actions']\n  const header = headerNames.map((name) => {\n    return <TableCell variant='head' colSpan={name === 'Actions'? 2 : 1 }> {name} </TableCell>\n  })  \n\n  // deleting favourites and showing popup on success\n  const deleteFavourite = (poi) => {\n    // display('LOADING')\n      Axios.get(`get/place/${poi.lat}/${poi.lon}`)\n      .then((results) => {\n        const id = results.data.rows[0].id\n        return Axios.post('delete/favourite', {id: id})\n      })\n      .then(() => Axios.get('get/favourites'))\n      .then((results) => {\n        setOpen(true)\n        setFavourites(results.data.rows)\n      })\n      .catch(err => console.log(err))\n  }\n\n    // generating favourite markers in map\n    const favouritesMarkers = !favourites ? null : favourites.map(favourite => {\n      const lat = parseFloat(favourite.lat)\n      const lon = parseFloat(favourite.lon)\n      const name = favourite.name\n      const region = favourite.region \n      return (\n        <FavouritesMarker setPlaceId={setPlaceId} poi={{lat, lon, name, region}} display={display} setPOI={setPOI} setInformation={setInformation} deleteFavourite={deleteFavourite}></FavouritesMarker>\n      )\n    })\n\n    // favourites Table item\n    const favouritesTables = !favourites ? null : favourites.map(favourite => {\n      const lat = parseFloat(favourite.lat)\n      const lon = parseFloat(favourite.lon)\n      const name = favourite.name\n      const region = favourite.region \n      return (\n        <FavouritesTableItem setPlaceId={setPlaceId} poi={{lat, lon, name, region}} display={display} setPOI={setPOI} setInformation={setInformation} deleteFavourite={deleteFavourite}></FavouritesTableItem>\n      )\n    })\n\n  // render the favourites page again on load\n  return(\n\n    <Container     maxWidth='md'>\n\n      <Typography variant='h3'>\n      Check out your favourite spots!\n      </Typography>\n      <SuccessAlert open={open} onClose={() => setOpen(false)}>\n        Removed from favourites!\n      </SuccessAlert>\n    \n\n      <Typography variant='body1'>\n        To see the conditions for your favourite locations, click on a point in the map or scroll down for your list of favourites and click on the 'Information'\n      </Typography>\n    \n      {/* <Profile/> */}\n      <MapContainer center={britishColumbia}  minZoom={4.5} zoomSnap={0.5} zoom={4.5} maxBounds={[[60, -140],[ 49.1, -114.2]]} scrollWheelZoom={true}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n      {favouritesMarkers}\n    </MapContainer>\n    <Paper style={{marginBottom:\"2rem\"}}>\n    <TableContainer>\n      <Table>\n      <TableHead>\n      <TableRow>\n        {header}\n      </TableRow>\n    </TableHead>\n    <TableBody>\n        {favouritesTables}\n    </TableBody>\n      {/* <FavouritesList setFavourites={props.setFavourites} setInformation={props.setInformation} favourites={props.favourites} display={props.display} setPOI={props.setPOI} /> */}\n      </Table>\n    </TableContainer>\n        </Paper>\n    </Container>\n  )\n};\n\n"]},"metadata":{},"sourceType":"module"}