{"ast":null,"code":"var axios = require('axios');\n\nvar mountainTypes = 'volcano peak';\nvar trailTypes = 'track path footway'; // helper to filter for the coordinates and name of interest when searching\n\nvar filterData = function filterData(results, typeString) {\n  var filtered = results.filter(function (result) {\n    return typeString.includes(result.type);\n  }).map(function (location) {\n    // display_name key is from api\n    var resultName = location.display_name.split(', British Columbia,')[0].split(',');\n    var name = resultName[0];\n    var region = resultName[resultName.length - 1];\n    return {\n      name: name,\n      region: region,\n      lat: Number(location.lat),\n      lon: Number(location.lon)\n    };\n  });\n  return filtered;\n};\n\nvar getMountainCoordinates = function getMountainCoordinates(peakName) {\n  return axios.get(\"https://nominatim.openstreetmap.org/search.php?q=\".concat(peakName, \"%2C+british%20columbia&polygon_geojson=1&format=jsonv2\")) // filter peaks with type of 'volcano' and 'peak' then extract information\n  .then(function (results) {\n    return filterData(results.data, mountainTypes);\n  });\n};\n\nvar getTrailCoordinates = function getTrailCoordinates(trailName) {\n  return axios.get(\"https://nominatim.openstreetmap.org/search.php?q=\".concat(trailName, \"%2C+british%20columbia&polygon_geojson=1&format=jsonv2\")).then(function (results) {\n    return filterData(results.data, trailTypes);\n  });\n};\n\nmodule.exports = {\n  getMountainCoordinates: getMountainCoordinates,\n  getTrailCoordinates: getTrailCoordinates\n};","map":{"version":3,"sources":["/home/mho/lighthouse/stormy/app/src/lib/getCoordinates.js"],"names":["axios","require","mountainTypes","trailTypes","filterData","results","typeString","filtered","filter","result","includes","type","map","location","resultName","display_name","split","name","region","length","lat","Number","lon","getMountainCoordinates","peakName","get","then","data","getTrailCoordinates","trailName","module","exports"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,aAAa,GAAG,cAAtB;AACA,IAAMC,UAAU,GAAG,oBAAnB,C,CAEA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAUC,UAAV,EAAyB;AAC1C,MAAMC,QAAQ,GAAGF,OAAO,CAACG,MAAR,CAAe,UAACC,MAAD;AAAA,WAAYH,UAAU,CAACI,QAAX,CAAoBD,MAAM,CAACE,IAA3B,CAAZ;AAAA,GAAf,EAChBC,GADgB,CACZ,UAACC,QAAD,EAAc;AACjB;AACA,QAAMC,UAAU,GAAGD,QAAQ,CAACE,YAAT,CAAsBC,KAAtB,CAA4B,qBAA5B,EAAmD,CAAnD,EAAsDA,KAAtD,CAA4D,GAA5D,CAAnB;AACA,QAAMC,IAAI,GAAGH,UAAU,CAAC,CAAD,CAAvB;AACA,QAAMI,MAAM,GAAGJ,UAAU,CAACA,UAAU,CAACK,MAAX,GAAoB,CAArB,CAAzB;AACA,WAAO;AAACF,MAAAA,IAAI,EAAJA,IAAD;AAAOC,MAAAA,MAAM,EAANA,MAAP;AAAeE,MAAAA,GAAG,EAAEC,MAAM,CAACR,QAAQ,CAACO,GAAV,CAA1B;AAA0CE,MAAAA,GAAG,EAAED,MAAM,CAACR,QAAQ,CAACS,GAAV;AAArD,KAAP;AACD,GAPgB,CAAjB;AAQA,SAAOf,QAAP;AACD,CAVD;;AAYA,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAc;AAC3C,SAAOxB,KAAK,CAACyB,GAAN,4DAA8DD,QAA9D,6DACP;AADO,GAENE,IAFM,CAED,UAACrB,OAAD;AAAA,WAAaD,UAAU,CAACC,OAAO,CAACsB,IAAT,EAAezB,aAAf,CAAvB;AAAA,GAFC,CAAP;AAGD,CAJD;;AAMA,IAAM0B,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,SAAD,EAAe;AACzC,SAAO7B,KAAK,CAACyB,GAAN,4DAA8DI,SAA9D,6DACNH,IADM,CACD,UAACrB,OAAD;AAAA,WAAaD,UAAU,CAACC,OAAO,CAACsB,IAAT,EAAexB,UAAf,CAAvB;AAAA,GADC,CAAP;AAED,CAHD;;AAKA2B,MAAM,CAACC,OAAP,GAAiB;AACfR,EAAAA,sBAAsB,EAAtBA,sBADe;AAEfK,EAAAA,mBAAmB,EAAnBA;AAFe,CAAjB","sourcesContent":["const axios = require('axios');\nconst mountainTypes = 'volcano peak';\nconst trailTypes = 'track path footway';\n\n// helper to filter for the coordinates and name of interest when searching\nconst filterData = (results, typeString) => {\n  const filtered = results.filter((result) => typeString.includes(result.type))\n  .map((location) => {\n    // display_name key is from api\n    const resultName = location.display_name.split(', British Columbia,')[0].split(',')\n    const name = resultName[0]\n    const region = resultName[resultName.length - 1]\n    return {name, region, lat: Number(location.lat), lon: Number(location.lon)}\n  })\n  return filtered;\n}\n\nconst getMountainCoordinates = (peakName) => {\n  return axios.get(`https://nominatim.openstreetmap.org/search.php?q=${peakName}%2C+british%20columbia&polygon_geojson=1&format=jsonv2`)\n  // filter peaks with type of 'volcano' and 'peak' then extract information\n  .then((results) => filterData(results.data, mountainTypes))\n}\n\nconst getTrailCoordinates = (trailName) => {\n  return axios.get(`https://nominatim.openstreetmap.org/search.php?q=${trailName}%2C+british%20columbia&polygon_geojson=1&format=jsonv2`)\n  .then((results) => filterData(results.data, trailTypes))\n}\n\nmodule.exports = {\n  getMountainCoordinates,\n  getTrailCoordinates\n}"]},"metadata":{},"sourceType":"module"}