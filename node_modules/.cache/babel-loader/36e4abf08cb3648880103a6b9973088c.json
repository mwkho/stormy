{"ast":null,"code":"import _toConsumableArray from \"/home/mho/lighthouse/stormy/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/mho/lighthouse/stormy/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mho/lighthouse/stormy/app/src/components/information/CommentList.js\";\nimport React, { useState, useEffect } from 'react';\nimport CommentListItem from \"./CommentListItem\";\nimport Axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      margin: theme.spacing(1)\n    }\n  };\n});\nexport default function CommentList(props) {\n  var _this = this;\n\n  var placeId = props.placeId;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newComment = _useState4[0],\n      setNewComment = _useState4[1];\n\n  var classes = useStyles();\n\n  var getComments = function getComments(placeId) {\n    console.log('arrived at comment');\n    return Axios.get(\"get/comments/\".concat(placeId)).then(function (results) {\n      console.log(results.data.rows);\n      setComments(_toConsumableArray(results.data.rows));\n    });\n  };\n\n  var submitComment = function submitComment() {\n    Axios.post(\"/add/comment\", {\n      placeId: placeId,\n      comment: newComment\n    }).then(getComments(placeId)) // setComments(prev => [...prev,newComment])  })\n    .catch(function (err) {\n      console.log(err);\n    });\n  }; //renders list of comments on initial render\n\n\n  useEffect(function () {\n    getComments(placeId);\n  }, []); // run this effect for every change on comments\n\n  useEffect(function () {\n    setNewComment(\"\");\n  }, [comments]);\n  var commentList = !comments ? undefined : comments.map(function (comment) {\n    // if(place){\n    if (comment.place_id === placeId) {\n      return /*#__PURE__*/React.createElement(CommentListItem, {\n        convertDate: props.convertDate,\n        timestamp: comment.comment_date,\n        username: \"username\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, comment.content);\n    } // }\n\n\n    return null;\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n    height: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"Have some conditions to report? Let us know by leaving a comment!\"), /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: '80%'\n    },\n    multiline: true,\n    variant: \"filled\",\n    onChange: function onChange(event) {\n      return setNewComment(event.target.value);\n    },\n    value: newComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: classes.root,\n    onClick: submitComment,\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Submit\"), commentList));\n}\n;","map":{"version":3,"sources":["/home/mho/lighthouse/stormy/app/src/components/information/CommentList.js"],"names":["React","useState","useEffect","CommentListItem","Axios","Button","Box","makeStyles","TextField","Typography","useStyles","theme","root","margin","spacing","CommentList","props","placeId","comments","setComments","newComment","setNewComment","classes","getComments","console","log","get","then","results","data","rows","submitComment","post","comment","catch","err","commentList","undefined","map","place_id","convertDate","comment_date","content","width","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,IAAMC,SAAS,GAAGH,UAAU,CAAC,UAACI,KAAD;AAAA,SAAY;AACvCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADJ;AADiC,GAAZ;AAAA,CAAD,CAA5B;AAMA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AAAA;;AAAA,MACjCC,OADiC,GACtBD,KADsB,CACjCC,OADiC;;AAAA,kBAERhB,QAAQ,EAFA;AAAA;AAAA,MAEjCiB,QAFiC;AAAA,MAEvBC,WAFuB;;AAAA,mBAGJlB,QAAQ,CAAC,EAAD,CAHJ;AAAA;AAAA,MAGjCmB,UAHiC;AAAA,MAGrBC,aAHqB;;AAIxC,MAAMC,OAAO,GAAGZ,SAAS,EAAzB;;AAEA,MAAMa,WAAW,GAAG,SAAdA,WAAc,CAACN,OAAD,EAAa;AAC/BO,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,WAAOrB,KAAK,CAACsB,GAAN,wBAA0BT,OAA1B,GACNU,IADM,CACD,UAACC,OAAD,EAAa;AACjBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,OAAO,CAACC,IAAR,CAAaC,IAAzB;AACAX,MAAAA,WAAW,oBAAKS,OAAO,CAACC,IAAR,CAAaC,IAAlB,EAAX;AACD,KAJM,CAAP;AAKD,GAPD;;AASA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAW;AAC/B3B,IAAAA,KAAK,CAAC4B,IAAN,iBAA2B;AAAEf,MAAAA,OAAO,EAAEA,OAAX;AAAoBgB,MAAAA,OAAO,EAACb;AAA5B,KAA3B,EACCO,IADD,CACMJ,WAAW,CAACN,OAAD,CADjB,EAC4B;AAD5B,KAECiB,KAFD,CAEO,UAAAC,GAAG,EAAE;AACVX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KAJD;AAKD,GAND,CAfwC,CAuBxC;;;AACAjC,EAAAA,SAAS,CAAC,YAAM;AACdqB,IAAAA,WAAW,CAACN,OAAD,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT,CAxBwC,CA4BxC;;AACAf,EAAAA,SAAS,CAAC,YAAI;AACZmB,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAFQ,EAEN,CAACH,QAAD,CAFM,CAAT;AAKA,MAAMkB,WAAW,GAAG,CAAClB,QAAD,GAAYmB,SAAZ,GAAwBnB,QAAQ,CAACoB,GAAT,CAAa,UAAAL,OAAO,EAAI;AAClE;AACE,QAAGA,OAAO,CAACM,QAAR,KAAqBtB,OAAxB,EAAgC;AAC9B,0BACE,oBAAC,eAAD;AAAiB,QAAA,WAAW,EAAED,KAAK,CAACwB,WAApC;AAAiD,QAAA,SAAS,EAAEP,OAAO,CAACQ,YAApE;AAAkF,QAAA,QAAQ,EAAC,UAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGR,OAAO,CAACS,OADX,CADF;AAKD,KAR+D,CASlE;;;AACA,WAAO,IAAP;AACD,GAX2C,CAA5C;AAaA,sBACE,uDACA,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEAFF,eAKE,oBAAC,GAAD;AACE,IAAA,SAAS,EAAEpB,OAAO,CAACV,IADrB;AAEE,IAAA,OAAO,EAAC,MAFV;AAGE,IAAA,aAAa,EAAC,QAHhB;AAIE,IAAA,cAAc,EAAC,QAJjB;AAKE,IAAA,UAAU,EAAC,QALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE;AAAE+B,MAAAA,KAAK,EAAE;AAAT,KADT;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,QAAQ,EAAE,kBAACC,KAAD;AAAA,aAAWvB,aAAa,CAACuB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAxB;AAAA,KAJZ;AAKE,IAAA,KAAK,EAAE1B,UALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAcE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAEE,OAAO,CAACV,IADrB;AAEE,IAAA,OAAO,EAAEmB,aAFX;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,KAAK,EAAC,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF,EAuBCK,WAvBD,CALF,CADF;AAkCD;AAAA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CommentListItem from \"./CommentListItem\"\nimport Axios from 'axios';\nimport Button from '@material-ui/core/Button'\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(1)\n  }\n}));\n\nexport default function CommentList(props){\n  const {placeId} = props\n  const [comments, setComments] = useState()\n  const [newComment, setNewComment] = useState(\"\")\n  const classes = useStyles();\n\n  const getComments = (placeId) => {\n    console.log('arrived at comment')\n    return Axios.get(`get/comments/${placeId}`)\n    .then((results) => {\n      console.log(results.data.rows)\n      setComments([...results.data.rows])\n    })\n  };\n\n  const submitComment = function() {\n    Axios.post(`/add/comment`, { placeId: placeId, comment:newComment})\n    .then(getComments(placeId)) // setComments(prev => [...prev,newComment])  })\n    .catch(err=>{\n      console.log(err)\n    })\n  }; \n  \n  //renders list of comments on initial render\n  useEffect(() => {\n    getComments(placeId)\n  }, [])\n  \n  // run this effect for every change on comments\n  useEffect(()=>{\n    setNewComment(\"\")\n  }, [comments])\n  \n\n  const commentList = !comments ? undefined : comments.map(comment => {\n    // if(place){\n      if(comment.place_id === placeId){\n        return (\n          <CommentListItem convertDate={props.convertDate} timestamp={comment.comment_date} username=\"username\">\n            {comment.content} \n          </CommentListItem>\n        )\n      }\n    // }\n    return null\n  });\n  \n  return(\n    <>\n    <Box height='2rem'/>\n      <Typography variant='h6'>\n        Have some conditions to report? Let us know by leaving a comment!\n      </Typography>\n      <Box\n        className={classes.root}\n        display=\"flex\"\n        flexDirection='column'\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <TextField  \n          style={{ width: '80%' }}\n          multiline\n          variant='filled'\n          onChange={(event) => setNewComment(event.target.value)} \n          value={newComment}            \n        />  \n        <Button\n          className={classes.root}\n          onClick={submitComment}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Submit\n        </Button >\n\n      {commentList}\n      </Box>\n    </>\n  )\n\n};\n"]},"metadata":{},"sourceType":"module"}